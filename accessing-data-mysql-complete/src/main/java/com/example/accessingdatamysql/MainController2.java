package com.example.accessingdatamysql;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController2 {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	//insertar
	@GetMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	//imprimir todo
	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	//borrar
	@GetMapping(path = "/delete") // Map ONLY POST Requests
	public @ResponseBody String deleteUser(@RequestParam int id) {
		userRepository.deleteById(id);
		return "removed";

	}
	//actualizar
	@GetMapping(path = "/update") // Map ONLY POST Requests
	public @ResponseBody String updateUser(@RequestParam int id, @RequestParam String name,
			@RequestParam String email) {
		User u = userRepository.findById(id).get();
		u.setName(name);
		u.setEmail(email);
		userRepository.save(u);
		return "updated";

	}
	//buscar por id
	@GetMapping(path = "/search") // Map ONLY POST Requests
	public @ResponseBody String searchUser(@RequestParam int id) {
		User u = userRepository.findById(id).get();
		return u.toString();
	}
	//leer todos los nombres
	@GetMapping(path = "/nombres")
	public @ResponseBody String nombresUsers() {
		List<String> lista = new ArrayList<>();
		Iterable<User> listaUsers = new ArrayList<>();
		listaUsers = userRepository.findAll();
		listaUsers.forEach(name -> lista.add(name.getName()));

		return lista.toString();
	}
	//buscar nombre que contiene algo
	@GetMapping(path = "/nombreContiene") // Map ONLY POST Requests
    public @ResponseBody String NombreUser(@RequestParam String nombre) {
        List<String> lista = new ArrayList<>();
        Iterable<User> listaUsuarios = new ArrayList<>();
        listaUsuarios = userRepository.findAll();
        
        listaUsuarios.forEach(nombr -> { if(nombr.getName().toLowerCase().contains(nombre.toLowerCase())) 
                                               lista.add(nombr.getName());
                                          else 
                                               System.out.println("No hay nadie");
                                        }
                               );

        return lista.toString();
    }

	
}
/*
 * https://spring.io/guides/gs/accessing-data-mysql/
 * 
 * -----------------------------------------
 * 
 * create database db_example; -- Creates the new database create user
 * 'springuser'@'%' identified by 'ThePassword'; -- Creates the user grant all
 * on db_example.* to 'springuser'@'%'; -- Gives all privileges to the new user
 * on the newly created database
 * 
 * ------------------------------------------- revisar el fichero
 * application.properties
 * 
 * spring.jpa.hibernate.ddl-auto=update
 * spring.datasource.url=jdbc:mysql://localhost:3306/db_example?serverTimezone=
 * Europe/Madrid ...
 * spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
 * #spring.jpa.show-sql: true
 * 
 * --------------------------------------------
 * 
 * Corregir línea 18 de MainController.java Cambiar @PostMapping por @GetMapping
 * 
 * AÑADIR: 
 * http://localhost:8080/demo/add?name=Alberto Carrera&email=alberto@guara.com 
 * http://localhost:8080/demo/add?name=Luis Aldea&email=luis@guara.com 
 * http://localhost:8080/demo/add?name=Belén Carrera&email=belen@guara.com
 * 
 * http://localhost:8080/demo/all
 * 
 * BORRAR: http://localhost:8080/demo/delete?id=1
 * 
 * UPDATE:
 * http://localhost:8080/demo/update?id=3&name=rerer&email=alberto@guara.com
 * 
 * SEARCH: http://localhost:8080/demo/search?id=3
 * 
 * NOMBRE: http://localhost:8080/demo/nombres
 * 
 * NOMBRECONTAINS: http://localhost:8080/demo/nombreContiene?nombre=al
 */
